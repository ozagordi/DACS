{
    "contents" : "Project 2: analysis of Samsung S II motion data\n========================================================\n\n## Introduction\nSmartphones are undoubtedly one of the most successful technologies of the last\nfew years, with hundreds of millions of units sold per year [1][]. Among many\nother different characteristics, several models feature on-board accelerometer\nand gyroscope. Generally speaking, these devices measure changes in the position\nand the orientation of the phone, respectively. Their simplest application is\nthe adaptation of the screen orientation when the phone is rotated.\nThese accessories can also transform mobile phones into, for example,\ncompasses and levels, and more in general they allow the development of\nmovement-aware software. \n\nIn this analysis, we study whether it is possible to accurately predict the\nactivity performed by a user from the acceleration and orientation of their\nsmartphone. To this end we analyzed the measures from the accelerometer and the\ngyroscope of a smartphone (Samsung Galaxy S II) worn at the waist by 21\nvolunteers engaged in six different activities (walking, walking upstairs,\nwalking downstairs, sitting, standing, laying) [2][]. This analysis is an\nexample of supervised learning\n\nWe show that appropriate classification algorithms are able to correctly\npredict the activity of the user in over 90% of the cases.\n\n## Methods\n### Data\nThe data were downloaded from the assignment webpage in the form of an R data\nfile, loaded and analysed with the R programming language[3][].\nThey consist of 7352 observations of 563 variables. Of these, 561 represent\nvarious measurement from the accelerometer and the gyroscope, one variable\nindicates the subject and one variable labels which of the activities the\nuser was performing.\n\n```{r echo=FALSE}\nlibrary(tree)\nlibrary(randomForest)\nload('samsungData.rda')\n\nmissClass = function(values, prediction){\n  sum((prediction != values) * 1 / length(values))\n}\n```\nWhile the data from the original experiment are taken from 30 volunteers, the\ndata provided for the assignment only contain observations from 21. The sensors\nembedded in the smartphone measure linear acceleration and angular velocity in\nthe 3 axes at a constant rate of 50 Hz. The 561 features reported come from\ndifferent pre-processing steps. For example, both time and frequency domain are\nreported, for the axial components as well as for the total magnitude, summary\nmeasures as maximum and minimum per time window and so on. All observations\nare normalized to lie in the interval [-1, 1]. No missing values were found.\n\n```{r}\nmax(samsungData[,-c(562,563)])\nmin(samsungData[,-c(562,563)])\nlength(unique(samsungData$subject))\nnames(samsungData)[1:10]\n```\n\n### Data cleaning\nSince the variable names contain several punctuation characters that are part\nof the syntax in R (like parentheses), we substitute them with underscores.\nMoreover, several variable names are repeated. This cannot be explained as an\naccidental duplication of a column because the values are different. Rather\nthan removing these columns then, we renamed all variables to make them unique.\n\nIn order to avoid overfitting and obtain a fair estimate of the prediction\nerror, we split the data in two non-overlapping sets; one for training and one\nfor testing. In a real-life application this would translate in the fact that\na smartphone would be able to detect the activity of its user without the need\nfor a user calibration. According to the assignment, the training set contains\nonly observations from subjects 1, 3, 5 and 6, while the test set only those\nfrom subjects 27, 28, 29 and 30.\n\n```{r, cache=TRUE}\n# reformat names and cure duplicates, activity as factor\nnames(samsungData) <- gsub('[[:punct:]]', \"_\", names(samsungData))\ndyn_vars <- dim(samsungData)[2] - 2\nsuff <- paste0(\"_v\", 1:dyn_vars)\nnames(samsungData)[1:dyn_vars] <- paste0(names(samsungData)[1:dyn_vars], suff)\nsamsungData$activity <- as.factor(samsungData$activity)\n# split data in train and test sets\ntrainData <- subset(samsungData, subject==1 | subject==3 | subject==5 | subject==6)\ntestData <- subset(samsungData, subject==27 | subject==28 | subject==29 | subject==30)\n```\n\n### Predictive models\nWe tested the performance of two classifiers: decision trees, implemented in\nthe package `tree`[4][] and random forests, implemented in the package\n`randomForest`[5][].\n\n## Results\n\n### Decision tree\nWe fitted a classification tree on all the dynamical observation in the\ntraining set using the activity as response variable (and excluding the\nsubject index from the covariates). The misclassification error, measured on\nthe test set, is 18%.\n```{r cache=TRUE}\n# decision tree prediction\nsamsung_tree <- tree(activity ~ ., data=trainData[, -562])\ntree_preds <- predict(samsung_tree, testData[, -562], type=\"class\")\nmissClass(tree_preds, testData$activity)\n```\n\n### Random forest\nWe tried to achieve a lower misclassification error using the random forest\nclassifier, implemented in the package `randomForest`.\n```{r ranfor, cache=TRUE}\n# random forest predictionva\nset.seed(123)\nsamsung_rf <- randomForest(activity ~ ., data=trainData[, -562], importance=TRUE,\n                           proximity=TRUE, do.trace=FALSE)\nrf_preds <- predict(samsung_rf, testData[, -562])\nmissClass(rf_preds, testData$activity)\n```\nThe error achieved by running with default values (number of trees to grow equal\nto 500) was 7.1%. Since the algorithm is stochastic in nature, we ran three\ntimes changing the random number generator. We did not observe a significant\nchange in the misclassification error.\n\n### Reducing the number of predictors\nThe package `randomForest` offers a function to compute, by means of\ncross-validation, the performance of models with a reduced number of\npredictors. The results are reported in Figure 1 and show that, already for 9\nvariables, the cross-validated misclassification error rate is lower than 1%.\n\n```{r reduce_predictors, cache=TRUE}\nset.seed(456)\nresult <- rfcv(trainData[, -562], trainData$activity)\n```\n\n```{r plot_reduced}\nplot(result$n.var, result$error.cv, log=\"x\", type=\"o\", lwd=2,\n     xlab=\"number of variables\",\n     ylab=\"error rate\")\n```\n\nWe selected the 30 most important predictors by looking at the importance\noutput of the `randomForest` call, we fitted a new random forest with only\nthese predictors on the test set and assess the performance, achieving a\nmisclassification error of 11%.\n\n```{r reduced_model, cache=TRUE}\nimp <- importance(samsung_rf)\nnames_reduced <- names(tail(sort(imp[,7]), 25))\nreduced_trainData <- cbind(trainData[, names_reduced], activity=trainData$activity)\nred_rf <- randomForest(activity ~ ., data=reduced_trainData, importance=TRUE,\n                           proximity=TRUE, do.trace=FALSE)\nmissClass(predict(red_rf, testData), testData$activity)\n```\n\n## Conclusions\nWe have analyzed linear acceleration and angular velocity measured by smartphones\nand the possibility to use them to predict the activity performed by the user.\nA decision tree achieves a misclassification error of 18%. A random forest, at\nthe expense of a longer computation time, brings down the error rate at 7.1%.\nFurther extension of this analysis might explore different classification\ntechniques, such as gradient boosting and neural networks.\n\n[1]: http://finance.yahoo.com/news/samsung-dominates-android-trounces-apple-234600155.html\n[2]: http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones\n[3]: http://www.R-project.org\n[4]: http://cran.r-project.org/web/packages/tree/index.html\n[5]: http://cran.r-project.org/web/packages/randomForest/index.html",
    "created" : 1362912374379.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "288087139",
    "id" : "94E953D4",
    "lastKnownWriteTime" : 1362988839,
    "path" : "~/Dropbox/Projects/Coursera/DataAnalysis/Project2/Report.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}